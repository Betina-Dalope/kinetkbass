{"version":3,"sources":["components/Kinetk.js","components/GlowTestScene.js","components/App.js","serviceWorker.js","index.js"],"names":["Kinetk","props","kTimeline","TimelineLite","paused","delay","arrowTimeline","from","this","refs","k1_arrow","y","alpha","ease","Expo","easeOut","x","k2_arrow","k1","k2","height","add","component","width","middle_letters","to","rotationY","transformOrigin","scale","left","top","play","ref","className","Component","GlowTestScene","state","params","exposure","bloomStrength","bloomThreshold","bloomRadius","drawCube","scene","gridHelper","THREE","geometry","material","color","cube","position","set","handleUpdate","newParams","setState","prevState","bloomPass","threshold","strength","radius","renderer","toneMappingExposure","Math","pow","camera","controls","pointLight","composer","clock","antialias","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","toneMapping","appendChild","domElement","OrbitControls","maxPolarAngle","PI","minDistance","maxDistance","renderScene","RenderPass","UnrealBloomPass","renderToScreen","EffectComposer","addPass","animate","requestAnimationFrame","getDelta","render","onresize","aspect","updateProjectionMatrix","data","onUpdate","path","label","min","max","step","App","skip_title_screen","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8617e09.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { TimelineLite, Expo } from 'gsap';\n\n\n\nclass Kinetk extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.kTimeline = new TimelineLite({paused: true, delay: .5});\n    }\n\n    componentDidMount() {\n\n        var arrowTimeline = new TimelineLite();\n        arrowTimeline\n            .from(this.refs.k1_arrow, .8, {y: \"200%\", alpha: 0, ease: Expo.easeOut}, \"start\")\n            .from(this.refs.k1_arrow, .4, {x: \"-150%\", ease: Expo.easeOut}, \"start\")\n            .from(this.refs.k2_arrow, .8, {y: \"-200%\", alpha: 0, ease: Expo.easeOut}, \"start\")\n            .from(this.refs.k2_arrow, .4, {x: \"150%\", ease: Expo.easeOut}, \"start\")\n\n\n        this.kTimeline\n            .from([this.refs.k1, this.refs.k2], 1, { height: 0, alpha: 0, ease: Expo.easeOut})\n            .add(arrowTimeline, \"-=.25\")\n            .add(\"widen\", \"+=.25\")\n            .from( this.refs.component, 1.2, { width: 40, ease: Expo.easeOut }, \"widen\") //hold at this position until loaded\n            .from( this.refs.middle_letters, 1.4, { width: 0, alpha: 0}, \"widen\")\n            //.to( this.refs.k2, 1, {rotationY: 180, transformOrigin:\"right\", x: -27, ease: Expo.easeOut, delay: -1})\n            .add(\"grow\", \"-=.8\")\n            .to( this.refs.k2, 1.6, {rotationY: 180, transformOrigin:\"right\", x: -27, ease: Expo.easeOut}, \"grow\")\n            .to( this.refs.component, 2, {scale: 1.5, transformOrigin:\"bottom\", delay: .2}, \"grow\")\n            \n            .add( \"shrink\", \"-=.2\")\n           \n            .to(this.refs.component, .25, { scale: 1, ease: Expo.easeOut }, \"shrink\")\n            .from( this.refs.component, 1, { left: \"50%\", top: \"50%\", x: \"-50%\", y: \"-50%\", ease: Expo.easeOut}, \"shrink\")\n\n\n            this.kTimeline.play();\n    }\n\n    render() {\n\n        return (\n            <div ref=\"component\" className=\"kinetk\">\n                <div ref=\"k1\" className=\"k k1\">\n                    <div ref=\"k1_arrow\" className=\"k__arrow\"></div>\n                </div>\n                <div ref=\"middle_letters\" className=\"middle-letters\">\n                    <span ref=\"i\">I</span>\n                    <span ref=\"n\">N</span>\n                    <span ref=\"e\">E</span>\n                    <span ref=\"t\">T</span>\n                </div>\n                <div ref=\"k2\" className=\"k k2\">\n                    <div ref=\"k2_arrow\" className=\"k__arrow\"></div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default Kinetk;\n","\nimport * as THREE from 'three';\nimport React, { Component } from 'react';\n// import Stats from 'three-full';\n//import { GUI } from './jsm/libs/dat.gui.module.js';\nimport 'react-dat-gui/dist/index.css';\nimport DatGui, { DatBoolean, DatColor, DatNumber, DatString } from 'react-dat-gui';\nimport { OrbitControls, GLTFLoader, EffectComposer, RenderPass, UnrealBloomPass } from 'three-full';\n\n\nclass GlowTestScene extends Component {\n\n    state = {\n        params: {\n            exposure: 5,\n            bloomStrength: 1.5,\n            bloomThreshold: 0,\n            bloomRadius: 0\n        }\n    }\n\n    componentDidMount() {\n\n        var scene, camera, controls, pointLight, stats;\n        var composer, renderer, mixer;\n        // var params = {\n        //     exposure: 1,\n        //     bloomStrength: 1.5,\n        //     bloomThreshold: 0,\n        //     bloomRadius: 0\n        // };\n        var clock = new THREE.Clock();\n        //var container = document.getElementById('container');\n        //stats = new Stats();\n        //container.appendChild(stats.dom);\n        this.renderer = new THREE.WebGLRenderer({ antialias: true });\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n        this.renderer.toneMapping = THREE.ReinhardToneMapping;\n        this.renderer.toneMappingExposure = this.state.params.exposure; // modified - exposure only works on the render not the bloom pass\n        this.refs.component.appendChild(this.renderer.domElement);  //modified\n        scene = new THREE.Scene();\n        camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 100);\n        camera.position.set(- 5, 2.5, - 3.5);\n        scene.add(camera);\n        controls = new OrbitControls(camera, this.renderer.domElement);\n        controls.maxPolarAngle = Math.PI * 0.5;\n        controls.minDistance = 1;\n        controls.maxDistance = 10;\n        scene.add(new THREE.AmbientLight(0x404040));\n        pointLight = new THREE.PointLight(0xffffff, 1);\n        camera.add(pointLight);\n        var renderScene = new RenderPass(scene, camera);\n        this.bloomPass = new UnrealBloomPass(new THREE.Vector2(window.innerWidth, window.innerHeight), 1.5, 0.4, 0.85);\n        this.bloomPass.threshold = this.state.params.bloomThreshold;\n        this.bloomPass.strength = this.state.params.bloomStrength;\n        this.bloomPass.radius = this.state.params.bloomRadius;\n        this.bloomPass.renderToScreen = true; //modified and very necessary to work\n\n        composer = new EffectComposer(this.renderer);\n        composer.addPass(renderScene);\n        composer.addPass(this.bloomPass);\n        // new GLTFLoader().load('models/PrimaryIonDrive.glb', function (gltf) {\n\n        //     var model = gltf.scene;\n        //     scene.add(model);\n        //     // Mesh contains self-intersecting semi-transparent faces, which display\n        //     // z-fighting unless depthWrite is disabled.\n        //     var core = model.getObjectByName('geo1_HoloFillDark_0');\n        //     core.material.depthWrite = false;\n        //     mixer = new THREE.AnimationMixer(model);\n        //     var clip = gltf.animations[0];\n        //     mixer.clipAction(clip.optimize()).play();\n        //     animate();\n        // });\n\n        this.drawCube(scene);\n        animate();\n\n\n        window.onresize = function () {\n            var width = window.innerWidth;\n            var height = window.innerHeight;\n            camera.aspect = width / height;\n            camera.updateProjectionMatrix();\n            this.renderer.setSize(width, height);\n            composer.setSize(width, height);\n        };\n\n        function animate() {\n            requestAnimationFrame(animate);\n            const delta = clock.getDelta();\n            //mixer.update(delta);\n            //stats.update();\n            composer.render();\n        }\n    }\n\n    drawCube = (scene) => {\n        var gridHelper = new THREE.GridHelper( 10, 10 );\n        scene.add( gridHelper );\n        var geometry = new THREE.BoxGeometry( 10, 10, 10 );\n        var material = new THREE.MeshBasicMaterial( { color: 0xffffff } );\n\n        var cube = new THREE.Mesh( geometry, material );\n\n        cube.position.set(5, 5, 5)\n        scene.add( cube );\n    }\n\n    handleUpdate = (newParams) => {\n        this.setState(prevState => ({\n            params: { ...prevState.params, ...newParams }\n        }));\n\n        this.bloomPass.threshold = newParams.bloomThreshold;\n        this.bloomPass.strength = newParams.bloomStrength;\n        this.bloomPass.radius = newParams.bloomRadius;\n        this.renderer.toneMappingExposure = Math.pow(newParams.exposure, 4.0);\n\n        //console.log(this.bloomPass);\n    }\n\n    render() {\n        const { params } = this.state;\n\n\n        return (\n            \n\n            <div ref=\"component\">\n                <DatGui data={params} onUpdate={this.handleUpdate}>\n                    <DatNumber path='exposure' label='exposure' min={0.1} max={2.0} step={0.1}/>\n                    <DatNumber path='bloomStrength' label='bloomStrength' min={0.0} max={1.0} step={0.1}/>\n                    <DatNumber path='bloomThreshold' label='bloomThreshold' min={0.0} max={3.0} step={0.1}/>\n                    <DatNumber path='bloomRadius' label='bloomRadius' min={0.0} max={1.0} step={0.01}/>\n                </DatGui>\n            </div>\n\n        );\n    }\n}\n\nexport default GlowTestScene;\n","import React, { Component, Fragment } from 'react';\nimport Kinetk from './Kinetk';\nimport GlowTestScene from './GlowTestScene';\n\n\nclass App extends Component {\n\tstate = {\n\t\tskip_title_screen: false\n\t}\n\n\tcomponentDidMount() {\n\t}\n\n\trender() {\n\n\t\treturn (\n\t\t\t// uncomment for actual app\n\t\t\t<Fragment>\n\t\t\t\t<Kinetk></Kinetk>\n\t\t\t\t<GlowTestScene></GlowTestScene>\n\t\t\t</Fragment>\n\n\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}